use serde::{Serialize, Deserialize};
use std::vec::Vec;
use std::fs::File;
use std::io::BufReader;
use std::path::Path;

#[derive(Debug, PartialEq, Serialize, Deserialize)]
struct Point {
    version: String,
    tokens: Vec<(String,i64)>,
}

fn main() {

    let file = File::open("./tokens.yaml").expect("unable to open the file...");
    let buf = BufReader::new(file);
    let tokens = serde_yaml::from_reader(buf);
    let total = 0;
    let t = tokens.tokens.iter().map(|(name,tokens)| {
        total + tokens
    }).collect();

    if total != 1000000 {
        panic!("not the right number of tokens!");
    }
    println!("Internal checks passed! have a nice day!");
}
